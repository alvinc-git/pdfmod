// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Poppler {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public class FontInfo : GLib.Object {

		[Obsolete]
		protected FontInfo(GLib.GType gtype) : base(gtype) {}
		public FontInfo(IntPtr raw) : base(raw) {}

		[DllImport("poppler-glib")]
		static extern IntPtr poppler_font_info_new(IntPtr document);

		public FontInfo (Poppler.Document document) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (FontInfo)) {
				throw new InvalidOperationException ("Can't override this constructor.");
			}
			Raw = poppler_font_info_new(document == null ? IntPtr.Zero : document.Handle);
		}

		[DllImport("poppler-glib")]
		static extern bool poppler_font_info_scan(IntPtr raw, int n_pages, IntPtr iter);

		public bool Scan(int n_pages, Poppler.FontsIter iter) {
			bool raw_ret = poppler_font_info_scan(Handle, n_pages, iter == null ? IntPtr.Zero : iter.Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("poppler-glib")]
		static extern IntPtr poppler_font_info_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = poppler_font_info_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("poppler-glib")]
		static extern void poppler_font_info_free(IntPtr raw);

		public void Free() {
			poppler_font_info_free(Handle);
		}

#endregion
	}
}
