// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Poppler {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public class AnnotMarkup : GLib.Object {

		[Obsolete]
		protected AnnotMarkup(GLib.GType gtype) : base(gtype) {}
		public AnnotMarkup(IntPtr raw) : base(raw) {}

		protected AnnotMarkup() : base(IntPtr.Zero)
		{
			CreateNativeObject (new string [0], new GLib.Value [0]);
		}

		[DllImport("poppler-glib")]
		static extern IntPtr poppler_annot_markup_get_label(IntPtr raw);

		public string Label { 
			get {
				IntPtr raw_ret = poppler_annot_markup_get_label(Handle);
				string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
				return ret;
			}
		}

		[DllImport("poppler-glib")]
		static extern int poppler_annot_markup_get_external_data(IntPtr raw);

		public Poppler.AnnotExternalDataType ExternalData { 
			get {
				int raw_ret = poppler_annot_markup_get_external_data(Handle);
				Poppler.AnnotExternalDataType ret = (Poppler.AnnotExternalDataType) raw_ret;
				return ret;
			}
		}

		[DllImport("poppler-glib")]
		static extern int poppler_annot_markup_get_reply_to(IntPtr raw);

		public Poppler.AnnotMarkupReplyType ReplyTo { 
			get {
				int raw_ret = poppler_annot_markup_get_reply_to(Handle);
				Poppler.AnnotMarkupReplyType ret = (Poppler.AnnotMarkupReplyType) raw_ret;
				return ret;
			}
		}

		[DllImport("poppler-glib")]
		static extern bool poppler_annot_markup_get_popup_is_open(IntPtr raw);

		public bool PopupIsOpen { 
			get {
				bool raw_ret = poppler_annot_markup_get_popup_is_open(Handle);
				bool ret = raw_ret;
				return ret;
			}
		}

		[DllImport("poppler-glib")]
		static extern IntPtr poppler_annot_markup_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = poppler_annot_markup_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("poppler-glib")]
		static extern IntPtr poppler_annot_markup_get_subject(IntPtr raw);

		public string Subject { 
			get {
				IntPtr raw_ret = poppler_annot_markup_get_subject(Handle);
				string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
				return ret;
			}
		}

		[DllImport("poppler-glib")]
		static extern double poppler_annot_markup_get_opacity(IntPtr raw);

		public double Opacity { 
			get {
				double raw_ret = poppler_annot_markup_get_opacity(Handle);
				double ret = raw_ret;
				return ret;
			}
		}

#endregion
	}
}
