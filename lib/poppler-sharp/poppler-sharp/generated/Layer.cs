// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Poppler {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public class Layer : GLib.Object {

		[Obsolete]
		protected Layer(GLib.GType gtype) : base(gtype) {}
		public Layer(IntPtr raw) : base(raw) {}

		protected Layer() : base(IntPtr.Zero)
		{
			CreateNativeObject (new string [0], new GLib.Value [0]);
		}

		[DllImport("poppler-glib")]
		static extern void poppler_layer_show(IntPtr raw);

		public void Show() {
			poppler_layer_show(Handle);
		}

		[DllImport("poppler-glib")]
		static extern IntPtr poppler_layer_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = poppler_layer_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("poppler-glib")]
		static extern bool poppler_layer_is_visible(IntPtr raw);

		public bool IsVisible { 
			get {
				bool raw_ret = poppler_layer_is_visible(Handle);
				bool ret = raw_ret;
				return ret;
			}
		}

		[DllImport("poppler-glib")]
		static extern IntPtr poppler_layer_get_title(IntPtr raw);

		public string Title { 
			get {
				IntPtr raw_ret = poppler_layer_get_title(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
		}

		[DllImport("poppler-glib")]
		static extern bool poppler_layer_is_parent(IntPtr raw);

		public bool IsParent { 
			get {
				bool raw_ret = poppler_layer_is_parent(Handle);
				bool ret = raw_ret;
				return ret;
			}
		}

		[DllImport("poppler-glib")]
		static extern void poppler_layer_hide(IntPtr raw);

		public void Hide() {
			poppler_layer_hide(Handle);
		}

		[DllImport("poppler-glib")]
		static extern int poppler_layer_get_radio_button_group_id(IntPtr raw);

		public int RadioButtonGroupId { 
			get {
				int raw_ret = poppler_layer_get_radio_button_group_id(Handle);
				int ret = raw_ret;
				return ret;
			}
		}

#endregion
	}
}
