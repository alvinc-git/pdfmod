// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Poppler {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[StructLayout(LayoutKind.Sequential)]
	public struct ImageMapping {

		public Poppler.Rectangle Area;
		public int ImageId;

		public static Poppler.ImageMapping Zero = new Poppler.ImageMapping ();

		public static Poppler.ImageMapping New(IntPtr raw) {
			if (raw == IntPtr.Zero)
				return Poppler.ImageMapping.Zero;
			return (Poppler.ImageMapping) Marshal.PtrToStructure (raw, typeof (Poppler.ImageMapping));
		}

		[DllImport("poppler-glib")]
		static extern IntPtr poppler_image_mapping_new();

		public static ImageMapping New()
		{
			ImageMapping result = ImageMapping.New (poppler_image_mapping_new());
			return result;
		}

		[DllImport("poppler-glib")]
		static extern IntPtr poppler_image_mapping_copy(IntPtr raw);

		public Poppler.ImageMapping Copy() {
			IntPtr this_as_native = System.Runtime.InteropServices.Marshal.AllocHGlobal (System.Runtime.InteropServices.Marshal.SizeOf (this));
			System.Runtime.InteropServices.Marshal.StructureToPtr (this, this_as_native, false);
			IntPtr raw_ret = poppler_image_mapping_copy(this_as_native);
			Poppler.ImageMapping ret = Poppler.ImageMapping.New (raw_ret);
			ReadNative (this_as_native, ref this);
			System.Runtime.InteropServices.Marshal.FreeHGlobal (this_as_native);
			return ret;
		}

		[DllImport("poppler-glib")]
		static extern void poppler_image_mapping_free(IntPtr raw);

		public void Free() {
			IntPtr this_as_native = System.Runtime.InteropServices.Marshal.AllocHGlobal (System.Runtime.InteropServices.Marshal.SizeOf (this));
			System.Runtime.InteropServices.Marshal.StructureToPtr (this, this_as_native, false);
			poppler_image_mapping_free(this_as_native);
			ReadNative (this_as_native, ref this);
			System.Runtime.InteropServices.Marshal.FreeHGlobal (this_as_native);
		}

		[DllImport("poppler-glib")]
		static extern IntPtr poppler_image_mapping_get_type();

		public static GLib.GType GType { 
			get {
				IntPtr raw_ret = poppler_image_mapping_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		static void ReadNative (IntPtr native, ref Poppler.ImageMapping target)
		{
			target = New (native);
		}

#endregion
	}
}
